// Code generated by go-bindata.
// sources:
// bindata.go
// bower.json
// bower_components/angular/.bower.json
// bower_components/angular/README.md
// bower_components/angular/angular-csp.css
// bower_components/angular/angular.js
// bower_components/angular/angular.min.js
// bower_components/angular/angular.min.js.gzip
// bower_components/angular/angular.min.js.map
// bower_components/angular/bower.json
// bower_components/angular/index.js
// bower_components/angular/package.json
// bower_components/core-component-page/.bower.json
// bower_components/core-component-page/README.md
// bower_components/core-component-page/bowager-logo.png
// bower_components/core-component-page/bower.json
// bower_components/core-component-page/core-component-page.html
// bower_components/core-component-page/demo.html
// bower_components/core-component-page/index.html
// bower_components/iron-flex-layout/.bower.json
// bower_components/iron-flex-layout/.gitignore
// bower_components/iron-flex-layout/README.md
// bower_components/iron-flex-layout/bower.json
// bower_components/iron-flex-layout/classes/iron-flex-layout.html
// bower_components/iron-flex-layout/classes/iron-shadow-flex-layout.html
// bower_components/iron-flex-layout/demo/index.html
// bower_components/iron-flex-layout/demo/x-app.html
// bower_components/iron-flex-layout/iron-flex-layout.html
// bower_components/paper-material/.bower.json
// bower_components/paper-material/.gitignore
// bower_components/paper-material/README.md
// bower_components/paper-material/bower.json
// bower_components/paper-material/demo/index.html
// bower_components/paper-material/index.html
// bower_components/paper-material/paper-material.html
// bower_components/paper-material/test/index.html
// bower_components/paper-material/test/paper-material.html
// bower_components/paper-styles/.bower.json
// bower_components/paper-styles/README.md
// bower_components/paper-styles/bower.json
// bower_components/paper-styles/classes/global.html
// bower_components/paper-styles/classes/shadow-layout.html
// bower_components/paper-styles/classes/shadow.html
// bower_components/paper-styles/classes/typography.html
// bower_components/paper-styles/color.html
// bower_components/paper-styles/default-theme.html
// bower_components/paper-styles/demo/index.html
// bower_components/paper-styles/demo-pages.html
// bower_components/paper-styles/demo.css
// bower_components/paper-styles/paper-styles-classes.html
// bower_components/paper-styles/paper-styles.html
// bower_components/paper-styles/shadow.html
// bower_components/paper-styles/typography.html
// bower_components/polymer/.bower.json
// bower_components/polymer/LICENSE.txt
// bower_components/polymer/bower.json
// bower_components/polymer/build.log
// bower_components/polymer/polymer-micro.html
// bower_components/polymer/polymer-mini.html
// bower_components/polymer/polymer.html
// bower_components/webcomponentsjs/.bower.json
// bower_components/webcomponentsjs/CustomElements.js
// bower_components/webcomponentsjs/CustomElements.min.js
// bower_components/webcomponentsjs/HTMLImports.js
// bower_components/webcomponentsjs/HTMLImports.min.js
// bower_components/webcomponentsjs/MutationObserver.js
// bower_components/webcomponentsjs/MutationObserver.min.js
// bower_components/webcomponentsjs/README.md
// bower_components/webcomponentsjs/ShadowDOM.js
// bower_components/webcomponentsjs/ShadowDOM.min.js
// bower_components/webcomponentsjs/bower.json
// bower_components/webcomponentsjs/build.log
// bower_components/webcomponentsjs/package.json
// bower_components/webcomponentsjs/webcomponents-lite.js
// bower_components/webcomponentsjs/webcomponents-lite.min.js
// bower_components/webcomponentsjs/webcomponents.js
// bower_components/webcomponentsjs/webcomponents.min.js
// index.html
// js/main.js
// js/policy.js
// main.go
// ui
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"strings"
	"os"
	"path"
	"path/filepath"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// bindataGo reads file data from disk. It returns an error on failure.
func bindataGo() (*asset, error) {
	path := filepath.Join(rootDir, "bindata.go")
	name := "bindata.go"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bowerJson reads file data from disk. It returns an error on failure.
func bowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower.json")
	name := "bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsAngularBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/.bower.json")
	name := "bower_components/angular/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularReadmeMd reads file data from disk. It returns an error on failure.
func bower_componentsAngularReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/README.md")
	name := "bower_components/angular/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularAngularCspCss reads file data from disk. It returns an error on failure.
func bower_componentsAngularAngularCspCss() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/angular-csp.css")
	name := "bower_components/angular/angular-csp.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularAngularJs reads file data from disk. It returns an error on failure.
func bower_componentsAngularAngularJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/angular.js")
	name := "bower_components/angular/angular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularAngularMinJs reads file data from disk. It returns an error on failure.
func bower_componentsAngularAngularMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/angular.min.js")
	name := "bower_components/angular/angular.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularAngularMinJsGzip reads file data from disk. It returns an error on failure.
func bower_componentsAngularAngularMinJsGzip() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/angular.min.js.gzip")
	name := "bower_components/angular/angular.min.js.gzip"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularAngularMinJsMap reads file data from disk. It returns an error on failure.
func bower_componentsAngularAngularMinJsMap() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/angular.min.js.map")
	name := "bower_components/angular/angular.min.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsAngularBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/bower.json")
	name := "bower_components/angular/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularIndexJs reads file data from disk. It returns an error on failure.
func bower_componentsAngularIndexJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/index.js")
	name := "bower_components/angular/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsAngularPackageJson reads file data from disk. It returns an error on failure.
func bower_componentsAngularPackageJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/angular/package.json")
	name := "bower_components/angular/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/.bower.json")
	name := "bower_components/core-component-page/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageReadmeMd reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/README.md")
	name := "bower_components/core-component-page/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageBowagerLogoPng reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageBowagerLogoPng() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/bowager-logo.png")
	name := "bower_components/core-component-page/bowager-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/bower.json")
	name := "bower_components/core-component-page/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageCoreComponentPageHtml reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageCoreComponentPageHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/core-component-page.html")
	name := "bower_components/core-component-page/core-component-page.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageDemoHtml reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageDemoHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/demo.html")
	name := "bower_components/core-component-page/demo.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsCoreComponentPageIndexHtml reads file data from disk. It returns an error on failure.
func bower_componentsCoreComponentPageIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/core-component-page/index.html")
	name := "bower_components/core-component-page/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/.bower.json")
	name := "bower_components/iron-flex-layout/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutGitignore reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutGitignore() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/.gitignore")
	name := "bower_components/iron-flex-layout/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutReadmeMd reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/README.md")
	name := "bower_components/iron-flex-layout/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/bower.json")
	name := "bower_components/iron-flex-layout/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutClassesIronFlexLayoutHtml reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutClassesIronFlexLayoutHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/classes/iron-flex-layout.html")
	name := "bower_components/iron-flex-layout/classes/iron-flex-layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutClassesIronShadowFlexLayoutHtml reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutClassesIronShadowFlexLayoutHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/classes/iron-shadow-flex-layout.html")
	name := "bower_components/iron-flex-layout/classes/iron-shadow-flex-layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutDemoIndexHtml reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutDemoIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/demo/index.html")
	name := "bower_components/iron-flex-layout/demo/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutDemoXAppHtml reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutDemoXAppHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/demo/x-app.html")
	name := "bower_components/iron-flex-layout/demo/x-app.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsIronFlexLayoutIronFlexLayoutHtml reads file data from disk. It returns an error on failure.
func bower_componentsIronFlexLayoutIronFlexLayoutHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/iron-flex-layout/iron-flex-layout.html")
	name := "bower_components/iron-flex-layout/iron-flex-layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/.bower.json")
	name := "bower_components/paper-material/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialGitignore reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialGitignore() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/.gitignore")
	name := "bower_components/paper-material/.gitignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialReadmeMd reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/README.md")
	name := "bower_components/paper-material/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/bower.json")
	name := "bower_components/paper-material/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialDemoIndexHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialDemoIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/demo/index.html")
	name := "bower_components/paper-material/demo/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialIndexHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/index.html")
	name := "bower_components/paper-material/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialPaperMaterialHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialPaperMaterialHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/paper-material.html")
	name := "bower_components/paper-material/paper-material.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialTestIndexHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialTestIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/test/index.html")
	name := "bower_components/paper-material/test/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperMaterialTestPaperMaterialHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperMaterialTestPaperMaterialHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-material/test/paper-material.html")
	name := "bower_components/paper-material/test/paper-material.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/.bower.json")
	name := "bower_components/paper-styles/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesReadmeMd reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/README.md")
	name := "bower_components/paper-styles/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/bower.json")
	name := "bower_components/paper-styles/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesClassesGlobalHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesClassesGlobalHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/classes/global.html")
	name := "bower_components/paper-styles/classes/global.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesClassesShadowLayoutHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesClassesShadowLayoutHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/classes/shadow-layout.html")
	name := "bower_components/paper-styles/classes/shadow-layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesClassesShadowHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesClassesShadowHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/classes/shadow.html")
	name := "bower_components/paper-styles/classes/shadow.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesClassesTypographyHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesClassesTypographyHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/classes/typography.html")
	name := "bower_components/paper-styles/classes/typography.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesColorHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesColorHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/color.html")
	name := "bower_components/paper-styles/color.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesDefaultThemeHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesDefaultThemeHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/default-theme.html")
	name := "bower_components/paper-styles/default-theme.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesDemoIndexHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesDemoIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/demo/index.html")
	name := "bower_components/paper-styles/demo/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesDemoPagesHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesDemoPagesHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/demo-pages.html")
	name := "bower_components/paper-styles/demo-pages.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesDemoCss reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesDemoCss() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/demo.css")
	name := "bower_components/paper-styles/demo.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesPaperStylesClassesHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesPaperStylesClassesHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/paper-styles-classes.html")
	name := "bower_components/paper-styles/paper-styles-classes.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesPaperStylesHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesPaperStylesHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/paper-styles.html")
	name := "bower_components/paper-styles/paper-styles.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesShadowHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesShadowHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/shadow.html")
	name := "bower_components/paper-styles/shadow.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPaperStylesTypographyHtml reads file data from disk. It returns an error on failure.
func bower_componentsPaperStylesTypographyHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/paper-styles/typography.html")
	name := "bower_components/paper-styles/typography.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsPolymerBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/.bower.json")
	name := "bower_components/polymer/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerLicenseTxt reads file data from disk. It returns an error on failure.
func bower_componentsPolymerLicenseTxt() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/LICENSE.txt")
	name := "bower_components/polymer/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsPolymerBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/bower.json")
	name := "bower_components/polymer/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerBuildLog reads file data from disk. It returns an error on failure.
func bower_componentsPolymerBuildLog() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/build.log")
	name := "bower_components/polymer/build.log"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerPolymerMicroHtml reads file data from disk. It returns an error on failure.
func bower_componentsPolymerPolymerMicroHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/polymer-micro.html")
	name := "bower_components/polymer/polymer-micro.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerPolymerMiniHtml reads file data from disk. It returns an error on failure.
func bower_componentsPolymerPolymerMiniHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/polymer-mini.html")
	name := "bower_components/polymer/polymer-mini.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsPolymerPolymerHtml reads file data from disk. It returns an error on failure.
func bower_componentsPolymerPolymerHtml() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/polymer/polymer.html")
	name := "bower_components/polymer/polymer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsBowerJson reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsBowerJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/.bower.json")
	name := "bower_components/webcomponentsjs/.bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsCustomelementsJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsCustomelementsJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/CustomElements.js")
	name := "bower_components/webcomponentsjs/CustomElements.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsCustomelementsMinJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsCustomelementsMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/CustomElements.min.js")
	name := "bower_components/webcomponentsjs/CustomElements.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsHtmlimportsJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsHtmlimportsJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/HTMLImports.js")
	name := "bower_components/webcomponentsjs/HTMLImports.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsHtmlimportsMinJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsHtmlimportsMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/HTMLImports.min.js")
	name := "bower_components/webcomponentsjs/HTMLImports.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsMutationobserverJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsMutationobserverJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/MutationObserver.js")
	name := "bower_components/webcomponentsjs/MutationObserver.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsMutationobserverMinJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsMutationobserverMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/MutationObserver.min.js")
	name := "bower_components/webcomponentsjs/MutationObserver.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsReadmeMd reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/README.md")
	name := "bower_components/webcomponentsjs/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsShadowdomJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsShadowdomJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/ShadowDOM.js")
	name := "bower_components/webcomponentsjs/ShadowDOM.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsShadowdomMinJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsShadowdomMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/ShadowDOM.min.js")
	name := "bower_components/webcomponentsjs/ShadowDOM.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsBowerJson2 reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsBowerJson2() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/bower.json")
	name := "bower_components/webcomponentsjs/bower.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsBuildLog reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsBuildLog() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/build.log")
	name := "bower_components/webcomponentsjs/build.log"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsPackageJson reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsPackageJson() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/package.json")
	name := "bower_components/webcomponentsjs/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsWebcomponentsLiteJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsWebcomponentsLiteJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/webcomponents-lite.js")
	name := "bower_components/webcomponentsjs/webcomponents-lite.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsWebcomponentsLiteMinJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsWebcomponentsLiteMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/webcomponents-lite.min.js")
	name := "bower_components/webcomponentsjs/webcomponents-lite.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsWebcomponentsJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsWebcomponentsJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/webcomponents.js")
	name := "bower_components/webcomponentsjs/webcomponents.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bower_componentsWebcomponentsjsWebcomponentsMinJs reads file data from disk. It returns an error on failure.
func bower_componentsWebcomponentsjsWebcomponentsMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "bower_components/webcomponentsjs/webcomponents.min.js")
	name := "bower_components/webcomponentsjs/webcomponents.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// indexHtml reads file data from disk. It returns an error on failure.
func indexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "index.html")
	name := "index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsMainJs reads file data from disk. It returns an error on failure.
func jsMainJs() (*asset, error) {
	path := filepath.Join(rootDir, "js/main.js")
	name := "js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsPolicyJs reads file data from disk. It returns an error on failure.
func jsPolicyJs() (*asset, error) {
	path := filepath.Join(rootDir, "js/policy.js")
	name := "js/policy.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// mainGo reads file data from disk. It returns an error on failure.
func mainGo() (*asset, error) {
	path := filepath.Join(rootDir, "main.go")
	name := "main.go"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// ui reads file data from disk. It returns an error on failure.
func ui() (*asset, error) {
	path := filepath.Join(rootDir, "ui")
	name := "ui"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"bower.json": bowerJson,
	"bower_components/angular/.bower.json": bower_componentsAngularBowerJson,
	"bower_components/angular/README.md": bower_componentsAngularReadmeMd,
	"bower_components/angular/angular-csp.css": bower_componentsAngularAngularCspCss,
	"bower_components/angular/angular.js": bower_componentsAngularAngularJs,
	"bower_components/angular/angular.min.js": bower_componentsAngularAngularMinJs,
	"bower_components/angular/angular.min.js.gzip": bower_componentsAngularAngularMinJsGzip,
	"bower_components/angular/angular.min.js.map": bower_componentsAngularAngularMinJsMap,
	"bower_components/angular/bower.json": bower_componentsAngularBowerJson2,
	"bower_components/angular/index.js": bower_componentsAngularIndexJs,
	"bower_components/angular/package.json": bower_componentsAngularPackageJson,
	"bower_components/core-component-page/.bower.json": bower_componentsCoreComponentPageBowerJson,
	"bower_components/core-component-page/README.md": bower_componentsCoreComponentPageReadmeMd,
	"bower_components/core-component-page/bowager-logo.png": bower_componentsCoreComponentPageBowagerLogoPng,
	"bower_components/core-component-page/bower.json": bower_componentsCoreComponentPageBowerJson2,
	"bower_components/core-component-page/core-component-page.html": bower_componentsCoreComponentPageCoreComponentPageHtml,
	"bower_components/core-component-page/demo.html": bower_componentsCoreComponentPageDemoHtml,
	"bower_components/core-component-page/index.html": bower_componentsCoreComponentPageIndexHtml,
	"bower_components/iron-flex-layout/.bower.json": bower_componentsIronFlexLayoutBowerJson,
	"bower_components/iron-flex-layout/.gitignore": bower_componentsIronFlexLayoutGitignore,
	"bower_components/iron-flex-layout/README.md": bower_componentsIronFlexLayoutReadmeMd,
	"bower_components/iron-flex-layout/bower.json": bower_componentsIronFlexLayoutBowerJson2,
	"bower_components/iron-flex-layout/classes/iron-flex-layout.html": bower_componentsIronFlexLayoutClassesIronFlexLayoutHtml,
	"bower_components/iron-flex-layout/classes/iron-shadow-flex-layout.html": bower_componentsIronFlexLayoutClassesIronShadowFlexLayoutHtml,
	"bower_components/iron-flex-layout/demo/index.html": bower_componentsIronFlexLayoutDemoIndexHtml,
	"bower_components/iron-flex-layout/demo/x-app.html": bower_componentsIronFlexLayoutDemoXAppHtml,
	"bower_components/iron-flex-layout/iron-flex-layout.html": bower_componentsIronFlexLayoutIronFlexLayoutHtml,
	"bower_components/paper-material/.bower.json": bower_componentsPaperMaterialBowerJson,
	"bower_components/paper-material/.gitignore": bower_componentsPaperMaterialGitignore,
	"bower_components/paper-material/README.md": bower_componentsPaperMaterialReadmeMd,
	"bower_components/paper-material/bower.json": bower_componentsPaperMaterialBowerJson2,
	"bower_components/paper-material/demo/index.html": bower_componentsPaperMaterialDemoIndexHtml,
	"bower_components/paper-material/index.html": bower_componentsPaperMaterialIndexHtml,
	"bower_components/paper-material/paper-material.html": bower_componentsPaperMaterialPaperMaterialHtml,
	"bower_components/paper-material/test/index.html": bower_componentsPaperMaterialTestIndexHtml,
	"bower_components/paper-material/test/paper-material.html": bower_componentsPaperMaterialTestPaperMaterialHtml,
	"bower_components/paper-styles/.bower.json": bower_componentsPaperStylesBowerJson,
	"bower_components/paper-styles/README.md": bower_componentsPaperStylesReadmeMd,
	"bower_components/paper-styles/bower.json": bower_componentsPaperStylesBowerJson2,
	"bower_components/paper-styles/classes/global.html": bower_componentsPaperStylesClassesGlobalHtml,
	"bower_components/paper-styles/classes/shadow-layout.html": bower_componentsPaperStylesClassesShadowLayoutHtml,
	"bower_components/paper-styles/classes/shadow.html": bower_componentsPaperStylesClassesShadowHtml,
	"bower_components/paper-styles/classes/typography.html": bower_componentsPaperStylesClassesTypographyHtml,
	"bower_components/paper-styles/color.html": bower_componentsPaperStylesColorHtml,
	"bower_components/paper-styles/default-theme.html": bower_componentsPaperStylesDefaultThemeHtml,
	"bower_components/paper-styles/demo/index.html": bower_componentsPaperStylesDemoIndexHtml,
	"bower_components/paper-styles/demo-pages.html": bower_componentsPaperStylesDemoPagesHtml,
	"bower_components/paper-styles/demo.css": bower_componentsPaperStylesDemoCss,
	"bower_components/paper-styles/paper-styles-classes.html": bower_componentsPaperStylesPaperStylesClassesHtml,
	"bower_components/paper-styles/paper-styles.html": bower_componentsPaperStylesPaperStylesHtml,
	"bower_components/paper-styles/shadow.html": bower_componentsPaperStylesShadowHtml,
	"bower_components/paper-styles/typography.html": bower_componentsPaperStylesTypographyHtml,
	"bower_components/polymer/.bower.json": bower_componentsPolymerBowerJson,
	"bower_components/polymer/LICENSE.txt": bower_componentsPolymerLicenseTxt,
	"bower_components/polymer/bower.json": bower_componentsPolymerBowerJson2,
	"bower_components/polymer/build.log": bower_componentsPolymerBuildLog,
	"bower_components/polymer/polymer-micro.html": bower_componentsPolymerPolymerMicroHtml,
	"bower_components/polymer/polymer-mini.html": bower_componentsPolymerPolymerMiniHtml,
	"bower_components/polymer/polymer.html": bower_componentsPolymerPolymerHtml,
	"bower_components/webcomponentsjs/.bower.json": bower_componentsWebcomponentsjsBowerJson,
	"bower_components/webcomponentsjs/CustomElements.js": bower_componentsWebcomponentsjsCustomelementsJs,
	"bower_components/webcomponentsjs/CustomElements.min.js": bower_componentsWebcomponentsjsCustomelementsMinJs,
	"bower_components/webcomponentsjs/HTMLImports.js": bower_componentsWebcomponentsjsHtmlimportsJs,
	"bower_components/webcomponentsjs/HTMLImports.min.js": bower_componentsWebcomponentsjsHtmlimportsMinJs,
	"bower_components/webcomponentsjs/MutationObserver.js": bower_componentsWebcomponentsjsMutationobserverJs,
	"bower_components/webcomponentsjs/MutationObserver.min.js": bower_componentsWebcomponentsjsMutationobserverMinJs,
	"bower_components/webcomponentsjs/README.md": bower_componentsWebcomponentsjsReadmeMd,
	"bower_components/webcomponentsjs/ShadowDOM.js": bower_componentsWebcomponentsjsShadowdomJs,
	"bower_components/webcomponentsjs/ShadowDOM.min.js": bower_componentsWebcomponentsjsShadowdomMinJs,
	"bower_components/webcomponentsjs/bower.json": bower_componentsWebcomponentsjsBowerJson2,
	"bower_components/webcomponentsjs/build.log": bower_componentsWebcomponentsjsBuildLog,
	"bower_components/webcomponentsjs/package.json": bower_componentsWebcomponentsjsPackageJson,
	"bower_components/webcomponentsjs/webcomponents-lite.js": bower_componentsWebcomponentsjsWebcomponentsLiteJs,
	"bower_components/webcomponentsjs/webcomponents-lite.min.js": bower_componentsWebcomponentsjsWebcomponentsLiteMinJs,
	"bower_components/webcomponentsjs/webcomponents.js": bower_componentsWebcomponentsjsWebcomponentsJs,
	"bower_components/webcomponentsjs/webcomponents.min.js": bower_componentsWebcomponentsjsWebcomponentsMinJs,
	"index.html": indexHtml,
	"js/main.js": jsMainJs,
	"js/policy.js": jsPolicyJs,
	"main.go": mainGo,
	"ui": ui,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{
	}},
	"bower.json": &bintree{bowerJson, map[string]*bintree{
	}},
	"bower_components": &bintree{nil, map[string]*bintree{
		"angular": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsAngularBowerJson, map[string]*bintree{
			}},
			"README.md": &bintree{bower_componentsAngularReadmeMd, map[string]*bintree{
			}},
			"angular-csp.css": &bintree{bower_componentsAngularAngularCspCss, map[string]*bintree{
			}},
			"angular.js": &bintree{bower_componentsAngularAngularJs, map[string]*bintree{
			}},
			"angular.min.js": &bintree{bower_componentsAngularAngularMinJs, map[string]*bintree{
			}},
			"angular.min.js.gzip": &bintree{bower_componentsAngularAngularMinJsGzip, map[string]*bintree{
			}},
			"angular.min.js.map": &bintree{bower_componentsAngularAngularMinJsMap, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsAngularBowerJson2, map[string]*bintree{
			}},
			"index.js": &bintree{bower_componentsAngularIndexJs, map[string]*bintree{
			}},
			"package.json": &bintree{bower_componentsAngularPackageJson, map[string]*bintree{
			}},
		}},
		"core-component-page": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsCoreComponentPageBowerJson, map[string]*bintree{
			}},
			"README.md": &bintree{bower_componentsCoreComponentPageReadmeMd, map[string]*bintree{
			}},
			"bowager-logo.png": &bintree{bower_componentsCoreComponentPageBowagerLogoPng, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsCoreComponentPageBowerJson2, map[string]*bintree{
			}},
			"core-component-page.html": &bintree{bower_componentsCoreComponentPageCoreComponentPageHtml, map[string]*bintree{
			}},
			"demo.html": &bintree{bower_componentsCoreComponentPageDemoHtml, map[string]*bintree{
			}},
			"index.html": &bintree{bower_componentsCoreComponentPageIndexHtml, map[string]*bintree{
			}},
		}},
		"iron-flex-layout": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsIronFlexLayoutBowerJson, map[string]*bintree{
			}},
			".gitignore": &bintree{bower_componentsIronFlexLayoutGitignore, map[string]*bintree{
			}},
			"README.md": &bintree{bower_componentsIronFlexLayoutReadmeMd, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsIronFlexLayoutBowerJson2, map[string]*bintree{
			}},
			"classes": &bintree{nil, map[string]*bintree{
				"iron-flex-layout.html": &bintree{bower_componentsIronFlexLayoutClassesIronFlexLayoutHtml, map[string]*bintree{
				}},
				"iron-shadow-flex-layout.html": &bintree{bower_componentsIronFlexLayoutClassesIronShadowFlexLayoutHtml, map[string]*bintree{
				}},
			}},
			"demo": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{bower_componentsIronFlexLayoutDemoIndexHtml, map[string]*bintree{
				}},
				"x-app.html": &bintree{bower_componentsIronFlexLayoutDemoXAppHtml, map[string]*bintree{
				}},
			}},
			"iron-flex-layout.html": &bintree{bower_componentsIronFlexLayoutIronFlexLayoutHtml, map[string]*bintree{
			}},
		}},
		"paper-material": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsPaperMaterialBowerJson, map[string]*bintree{
			}},
			".gitignore": &bintree{bower_componentsPaperMaterialGitignore, map[string]*bintree{
			}},
			"README.md": &bintree{bower_componentsPaperMaterialReadmeMd, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsPaperMaterialBowerJson2, map[string]*bintree{
			}},
			"demo": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{bower_componentsPaperMaterialDemoIndexHtml, map[string]*bintree{
				}},
			}},
			"index.html": &bintree{bower_componentsPaperMaterialIndexHtml, map[string]*bintree{
			}},
			"paper-material.html": &bintree{bower_componentsPaperMaterialPaperMaterialHtml, map[string]*bintree{
			}},
			"test": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{bower_componentsPaperMaterialTestIndexHtml, map[string]*bintree{
				}},
				"paper-material.html": &bintree{bower_componentsPaperMaterialTestPaperMaterialHtml, map[string]*bintree{
				}},
			}},
		}},
		"paper-styles": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsPaperStylesBowerJson, map[string]*bintree{
			}},
			"README.md": &bintree{bower_componentsPaperStylesReadmeMd, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsPaperStylesBowerJson2, map[string]*bintree{
			}},
			"classes": &bintree{nil, map[string]*bintree{
				"global.html": &bintree{bower_componentsPaperStylesClassesGlobalHtml, map[string]*bintree{
				}},
				"shadow-layout.html": &bintree{bower_componentsPaperStylesClassesShadowLayoutHtml, map[string]*bintree{
				}},
				"shadow.html": &bintree{bower_componentsPaperStylesClassesShadowHtml, map[string]*bintree{
				}},
				"typography.html": &bintree{bower_componentsPaperStylesClassesTypographyHtml, map[string]*bintree{
				}},
			}},
			"color.html": &bintree{bower_componentsPaperStylesColorHtml, map[string]*bintree{
			}},
			"default-theme.html": &bintree{bower_componentsPaperStylesDefaultThemeHtml, map[string]*bintree{
			}},
			"demo": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{bower_componentsPaperStylesDemoIndexHtml, map[string]*bintree{
				}},
			}},
			"demo-pages.html": &bintree{bower_componentsPaperStylesDemoPagesHtml, map[string]*bintree{
			}},
			"demo.css": &bintree{bower_componentsPaperStylesDemoCss, map[string]*bintree{
			}},
			"paper-styles-classes.html": &bintree{bower_componentsPaperStylesPaperStylesClassesHtml, map[string]*bintree{
			}},
			"paper-styles.html": &bintree{bower_componentsPaperStylesPaperStylesHtml, map[string]*bintree{
			}},
			"shadow.html": &bintree{bower_componentsPaperStylesShadowHtml, map[string]*bintree{
			}},
			"typography.html": &bintree{bower_componentsPaperStylesTypographyHtml, map[string]*bintree{
			}},
		}},
		"polymer": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsPolymerBowerJson, map[string]*bintree{
			}},
			"LICENSE.txt": &bintree{bower_componentsPolymerLicenseTxt, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsPolymerBowerJson2, map[string]*bintree{
			}},
			"build.log": &bintree{bower_componentsPolymerBuildLog, map[string]*bintree{
			}},
			"polymer-micro.html": &bintree{bower_componentsPolymerPolymerMicroHtml, map[string]*bintree{
			}},
			"polymer-mini.html": &bintree{bower_componentsPolymerPolymerMiniHtml, map[string]*bintree{
			}},
			"polymer.html": &bintree{bower_componentsPolymerPolymerHtml, map[string]*bintree{
			}},
		}},
		"webcomponentsjs": &bintree{nil, map[string]*bintree{
			".bower.json": &bintree{bower_componentsWebcomponentsjsBowerJson, map[string]*bintree{
			}},
			"CustomElements.js": &bintree{bower_componentsWebcomponentsjsCustomelementsJs, map[string]*bintree{
			}},
			"CustomElements.min.js": &bintree{bower_componentsWebcomponentsjsCustomelementsMinJs, map[string]*bintree{
			}},
			"HTMLImports.js": &bintree{bower_componentsWebcomponentsjsHtmlimportsJs, map[string]*bintree{
			}},
			"HTMLImports.min.js": &bintree{bower_componentsWebcomponentsjsHtmlimportsMinJs, map[string]*bintree{
			}},
			"MutationObserver.js": &bintree{bower_componentsWebcomponentsjsMutationobserverJs, map[string]*bintree{
			}},
			"MutationObserver.min.js": &bintree{bower_componentsWebcomponentsjsMutationobserverMinJs, map[string]*bintree{
			}},
			"README.md": &bintree{bower_componentsWebcomponentsjsReadmeMd, map[string]*bintree{
			}},
			"ShadowDOM.js": &bintree{bower_componentsWebcomponentsjsShadowdomJs, map[string]*bintree{
			}},
			"ShadowDOM.min.js": &bintree{bower_componentsWebcomponentsjsShadowdomMinJs, map[string]*bintree{
			}},
			"bower.json": &bintree{bower_componentsWebcomponentsjsBowerJson2, map[string]*bintree{
			}},
			"build.log": &bintree{bower_componentsWebcomponentsjsBuildLog, map[string]*bintree{
			}},
			"package.json": &bintree{bower_componentsWebcomponentsjsPackageJson, map[string]*bintree{
			}},
			"webcomponents-lite.js": &bintree{bower_componentsWebcomponentsjsWebcomponentsLiteJs, map[string]*bintree{
			}},
			"webcomponents-lite.min.js": &bintree{bower_componentsWebcomponentsjsWebcomponentsLiteMinJs, map[string]*bintree{
			}},
			"webcomponents.js": &bintree{bower_componentsWebcomponentsjsWebcomponentsJs, map[string]*bintree{
			}},
			"webcomponents.min.js": &bintree{bower_componentsWebcomponentsjsWebcomponentsMinJs, map[string]*bintree{
			}},
		}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
	"js": &bintree{nil, map[string]*bintree{
		"main.js": &bintree{jsMainJs, map[string]*bintree{
		}},
		"policy.js": &bintree{jsPolicyJs, map[string]*bintree{
		}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{
	}},
	"ui": &bintree{ui, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

